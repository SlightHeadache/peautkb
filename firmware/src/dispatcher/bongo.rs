use super::*;
use embedded_graphics::{
    image::{Image, ImageRaw},
    pixelcolor::BinaryColor,
};

#[rustfmt::skip]
const ANI : &[&[u8]] = &[
&[
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000010, 0b00010000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000100, 0b00010000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b01111000, 0b00001000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00001000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00011000, 0b00000000, 0b00000100, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00011000, 0b00100000, 0b00000000, 0b00000010, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00100110, 0b01000000, 0b00000000, 0b00000001, 0b10000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000001, 0b10000000, 0b00000000, 0b00000000, 0b01000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b00100000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b00010000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00011000, 0b00001000, 0b00000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00011000, 0b00000100, 0b00000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000, 0b00000010, 0b00000001,
    0b00000000, 0b00000000, 0b00100000, 0b01110011, 0b00000000, 0b01000000, 0b00000001, 0b00011110,
    0b00000000, 0b00000000, 0b00010000, 0b10101011, 0b00010011, 0b11000000, 0b00000001, 0b11100000,
    0b00000000, 0b00000000, 0b00010001, 0b00001000, 0b00001100, 0b00000000, 0b00000000, 0b10000000,
    0b00000000, 0b00000000, 0b00100001, 0b10010100, 0b00000000, 0b00000011, 0b00000000, 0b10000000,
    0b00000000, 0b00000000, 0b00100010, 0b01100100, 0b00000000, 0b01111100, 0b11000000, 0b10000000,
    0b00000000, 0b00000000, 0b01000010, 0b01100100, 0b00000111, 0b10000000, 0b00111111, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000100, 0b00111000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00001111, 0b11000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b10000000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b10011111, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000001, 0b11100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00111110, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000111, 0b11000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b01111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
],
&[
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000010, 0b00010000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000100, 0b00010000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b01111000, 0b00001000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00001000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00011000, 0b00000000, 0b00000100, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00011000, 0b00100000, 0b00000000, 0b00000010, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00100110, 0b01000000, 0b00000000, 0b00000001, 0b10011110, 0b00000000,
    0b00000000, 0b00000000, 0b01000001, 0b10000000, 0b00000000, 0b00000000, 0b01100001, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b00100100, 0b10000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b01010001, 0b10000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00011000, 0b01001100, 0b10000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00011000, 0b10001100, 0b10000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b10000001,
    0b00000000, 0b00000000, 0b00100000, 0b00000011, 0b00000000, 0b01000000, 0b10000001, 0b00011110,
    0b00000000, 0b00000000, 0b00010000, 0b00000011, 0b00010011, 0b11000000, 0b00000001, 0b11100000,
    0b00000000, 0b00000000, 0b00010000, 0b00000000, 0b00001100, 0b00000000, 0b00001110, 0b00000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00000011, 0b11110000, 0b00000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b01111100, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00111000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b10011111, 0b10000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000001, 0b11100000, 0b01100000, 0b00100000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00111110, 0b00000000, 0b00011000, 0b00100000, 0b00000000, 0b00000000, 0b00000000,
    0b00000111, 0b11000000, 0b00000000, 0b00000111, 0b11000000, 0b00000000, 0b00000000, 0b00000000,
    0b01111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
]];

#[rustfmt::skip]
const READY : &[u8] = &[
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000010, 0b00010000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000100, 0b00010000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b01111000, 0b00001000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00001000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00011000, 0b00000000, 0b00000100, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00011000, 0b00100000, 0b00000000, 0b00000010, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00100110, 0b01000000, 0b00000000, 0b00000001, 0b10011110, 0b00000000,
    0b00000000, 0b00000000, 0b01000001, 0b10000000, 0b00000000, 0b00000000, 0b01100001, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b00100100, 0b10000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b01010001, 0b10000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00011000, 0b01001100, 0b10000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00011000, 0b10001100, 0b10000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b10000001,
    0b00000000, 0b00000000, 0b00100000, 0b01110011, 0b00000000, 0b01000000, 0b10000001, 0b00011110,
    0b00000000, 0b00000000, 0b00010000, 0b10101011, 0b00010011, 0b11000000, 0b00000001, 0b11100000,
    0b00000000, 0b00000000, 0b00010001, 0b00001000, 0b00001100, 0b00000000, 0b00001110, 0b00000000,
    0b00000000, 0b00000000, 0b00100001, 0b10010100, 0b00000000, 0b00000011, 0b11110000, 0b00000000,
    0b00000000, 0b00000000, 0b00100010, 0b01100100, 0b00000000, 0b01111100, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000010, 0b01100100, 0b00000111, 0b10000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000100, 0b00111000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00001111, 0b11000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b10000000, 0b01111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b10011111, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000001, 0b11100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00111110, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000111, 0b11000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b01111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,    
];

#[rustfmt::skip]
const WAITING : &[u8] = &[
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000010, 0b00010000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000100, 0b00010000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b01111000, 0b00001000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00001000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00011000, 0b00000000, 0b00000100, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00011000, 0b00100000, 0b00000000, 0b00000010, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00100110, 0b01000000, 0b00000000, 0b00000001, 0b10000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000001, 0b10000000, 0b00000000, 0b00000000, 0b01000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b00100000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b00010000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00011000, 0b00001000, 0b00000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00011000, 0b00000100, 0b00000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000, 0b00000010, 0b00000001,
    0b00000000, 0b00000000, 0b00100000, 0b00000011, 0b00000000, 0b01000000, 0b00000001, 0b00011110,
    0b00000000, 0b00000000, 0b00010000, 0b00000011, 0b00010011, 0b11000000, 0b00000001, 0b11100000,
    0b00000000, 0b00000000, 0b00010000, 0b00000000, 0b00001100, 0b00000000, 0b00000000, 0b10000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b10000000,
    0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b01111100, 0b11000000, 0b10000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000111, 0b10000000, 0b00111111, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00111000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b10011111, 0b10000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000001, 0b11100000, 0b01100000, 0b00100000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00111110, 0b00000000, 0b00011000, 0b00100000, 0b00000000, 0b00000000, 0b00000000,
    0b00000111, 0b11000000, 0b00000000, 0b00000111, 0b11000000, 0b00000000, 0b00000000, 0b00000000,
    0b01111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b0000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
];

pub struct Bongo {
    typing: u32,
    frame: u8,
    waiting: ImageRaw<'static, BinaryColor>,
    ready: ImageRaw<'static, BinaryColor>,
    left: ImageRaw<'static, BinaryColor>,
    right: ImageRaw<'static, BinaryColor>,
}

impl Bongo {
    fn bongo(&mut self) {
        if self.typing < 70 {
            self.typing += 7
        }
    }
}

impl<'a> Default for Bongo {
    fn default() -> Self {
        let waiting = ImageRaw::new(WAITING, 64, 30);
        let ready = ImageRaw::new(READY, 64, 30);
        let left = ImageRaw::new(ANI[0], 64, 30);
        let right = ImageRaw::new(ANI[1], 64, 30);

        Bongo {
            waiting,
            ready,
            left,
            right,
            typing: 0,
            frame: 0,
        }
    }
}

impl State for Bongo {
    type Messages = Option<Message>;

    fn handle_event(&mut self, message: Message) -> Self::Messages {
        match message {
            Message::MatrixKeyRelease(_, _) => {
                self.bongo();
                // Some(Message::Bongo)
                None
            }
            Message::Bongo => {
                self.bongo();
                None
            }
            Message::DisplaySelect(DisplayedState::Bongo)
            | Message::SecondaryDisplaySelect(DisplayedState::Bongo) => {
                self.typing = 0;
                None
            }
            _ => None,
        }
    }

    fn write_to_display<DI, DSIZE>(&mut self, display: &mut GraphicsMode<DI, DSIZE>)
    where
        DSIZE: DisplaySize,
        DI: WriteOnlyDataCommand,
    {
        display.clear();
        if self.typing > 0 {
            self.typing -= 1;
        }

        let image: Image<_, BinaryColor> = match self.typing {
            0 => Image::new(&self.waiting, Point::new(0, 31)),
            1..=20 => Image::new(&self.ready, Point::new(0, 31)),
            _ => {
                if self.frame == 24 {
                    self.frame = 0;
                } else {
                    self.frame += 1;
                }
                match self.frame % 12 {
                    0..=6 => Image::new(&self.left, Point::new(0, 31)),
                    _ => Image::new(&self.right, Point::new(0, 31)),
                }
            }
        };
        image.draw(display).unwrap();

        display.flush().ok();
    }
}
